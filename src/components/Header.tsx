// src/components/Header.tsx
import React, { useState } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import logo from '../assets/logo.png';
import {FaInstagram, FaTelegram} from "react-icons/fa";

const Header: React.FC = () => {
    const navigate = useNavigate();
    const location = useLocation();
    const isHomePage = location.pathname === '/';
    const [isContactPopupOpen, setIsContactPopupOpen] = useState(false);
    const [telegramData, setTelegramData] = useState({
        name: '',
        phone: ''
    });
    const [isLoading, setIsLoading] = useState(false);

    // üîê –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–ò –î–ê–ù–ù–´–ï –ù–ê –°–í–û–ò!
    const BOT_TOKEN = import.meta.env.VITE_TELEGRAM_BOT_TOKEN;
    const CHAT_ID = import.meta.env.VITE_TELEGRAM_CHAT_ID;

    const scrollToSection = (sectionId: string) => {
        if (!isHomePage) {
            navigate('/');
            setTimeout(() => {
                const element = document.getElementById(sectionId);
                if (element) {
                    element.scrollIntoView({
                        behavior: 'smooth',
                        block: 'start'
                    });
                }
            }, 100);
            return;
        }

        const element = document.getElementById(sectionId);
        if (element) {
            element.scrollIntoView({
                behavior: 'smooth',
                block: 'start'
            });
        }
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    const formatPhoneNumber = (value: string) => {
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
        const numbers = value.replace(/\D/g, '');

        // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–µ —Å 375, –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å
        let formattedNumber = numbers;
        if (numbers.startsWith('375')) {
            formattedNumber = numbers;
        } else if (numbers.startsWith('80')) {
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º 80 –≤ 375
            formattedNumber = '375' + numbers.slice(2);
        } else if (numbers.length > 0) {
            formattedNumber = '375' + numbers;
        }

        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É (375 + 9 —Ü–∏—Ñ—Ä = 12 —Ü–∏—Ñ—Ä)
        const limitedNumber = formattedNumber.slice(0, 12);

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ –∫—Ä–∞—Å–∏–≤—ã–π –≤–∏–¥
        let result = '';
        if (limitedNumber.length > 0) {
            result = '+375';
            if (limitedNumber.length > 3) {
                result += ` (${limitedNumber.slice(3, 5)}`;
            }
            if (limitedNumber.length > 5) {
                result += `) ${limitedNumber.slice(5, 8)}`;
            }
            if (limitedNumber.length > 8) {
                result += `-${limitedNumber.slice(8, 10)}`;
            }
            if (limitedNumber.length > 10) {
                result += `-${limitedNumber.slice(10, 12)}`;
            }
        }

        setTelegramData({...telegramData, phone: result});
    };

    // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä–∞
    const isValidPhone = (phone: string): boolean => {
        const numbers = phone.replace(/\D/g, '');
        // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–æ–≤–Ω–æ 12 —Ü–∏—Ñ—Ä (375 + 9 —Ü–∏—Ñ—Ä)
        return numbers.length === 12 && numbers.startsWith('375');
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–∏—Å—Ç–æ–≥–æ –Ω–æ–º–µ—Ä–∞ (–±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    const getCleanPhone = (phone: string): string => {
        return phone.replace(/\D/g, '');
    };

    const sendToTelegram = async (name: string, phone: string) => {
        const cleanPhone = getCleanPhone(phone);
        const formattedPhone = `+${cleanPhone.slice(0, 3)} ${cleanPhone.slice(3, 5)} ${cleanPhone.slice(5, 8)}-${cleanPhone.slice(8, 10)}-${cleanPhone.slice(10, 12)}`;

        const text = `
üéØ –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –° –°–ê–ô–¢–ê!

üë§ –ò–º—è: ${name}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${formattedPhone}
üåê –°—Ç—Ä–∞–Ω–∏—Ü–∞: ${location.pathname}
‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}

üí´ XOXO Brows - –°–≤–µ—Ç–ª–æ–≥–æ—Ä—Å–∫
        `;

        try {
            const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    chat_id: CHAT_ID,
                    text: text,
                    parse_mode: 'HTML'
                })
            });

            if (!response.ok) {
                throw new Error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏');
            }

            return true;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error);
            return false;
        }
    };

    const handleTelegramSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        setIsLoading(true);

        try {
            const success = await sendToTelegram(telegramData.name, telegramData.phone);

            if (success) {
                // –£—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
                setIsContactPopupOpen(false);
                setTelegramData({ name: '', phone: '' });
                alert('‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –Ø —Å–≤—è–∂—É—Å—å —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!');
            } else {
                // –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É
                const confirmAlternative = window.confirm(
                    '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –•–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ –Ω–∞–ø—Ä—è–º—É—é –≤ Telegram?'
                );

                if (confirmAlternative) {
                    const message = `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –•–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É.%0A–ò–º—è: ${telegramData.name}%0A–¢–µ–ª–µ—Ñ–æ–Ω: ${telegramData.phone}`;
                    window.open(`https://t.me/xoxo___brows?text=${message}`, '_blank');
                }
            }
        } catch (error) {
            alert('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –Ω–∞–ø—Ä—è–º—É—é –≤ Instagram –∏–ª–∏ Telegram.');
        } finally {
            setIsLoading(false);
        }
    };

    const openInstagram = () => {
        window.open('https://instagram.com/xoxo___brows', '_blank');
        setIsContactPopupOpen(false);
    };

    return (
        <>
            <header className="header">
                <div className="header-container">
                    {/* –õ–æ–≥–æ—Ç–∏–ø */}
                    <img
                        src={logo}
                        alt="XOXO Brows"
                        className="header-logo"
                        onClick={() => navigate('/')}
                        style={{ cursor: 'pointer' }}
                    />

                    <nav className="header-nav">
                        {/* –û–°–ù–û–í–ù–ê–Ø –ù–ê–í–ò–ì–ê–¶–ò–Ø - –≤—Å–µ–≥–¥–∞ –≤–∏–¥–Ω–∞ */}
                        <div className="nav-group main-nav">
                            <a
                                href="/about"
                                onClick={(e) => {
                                    e.preventDefault();
                                    navigate('/about');
                                }}
                                className={location.pathname === '/about' ? 'nav-link active' : 'nav-link'}
                            >
                                –û –º–∞—Å—Ç–µ—Ä–µ
                            </a>
                            <a
                                href="/contacts"
                                onClick={(e) => {
                                    e.preventDefault();
                                    navigate('/contacts');
                                }}
                                className={location.pathname === '/contacts' ? 'nav-link active' : 'nav-link'}
                            >
                                –ö–æ–Ω—Ç–∞–∫—Ç—ã
                            </a>
                            <a
                                href="/services"
                                onClick={(e) => {
                                    e.preventDefault();
                                    navigate('/services');
                                }}
                                className={location.pathname === '/services' ? 'nav-link active' : 'nav-link'}
                            >
                                –ü—Ä–æ—Ü–µ–¥—É—Ä—ã
                            </a>
                            <a
                                href="/portfolio"
                                onClick={(e) => {
                                    e.preventDefault();
                                    navigate('/portfolio');
                                }}
                                className={location.pathname === '/portfolio'? 'nav-link active' : 'nav-link'}
                            >
                                –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ
                            </a>
                        </div>
                        <div style={{display: 'none'}}>
                            –ü–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–π –º–∞–∫–∏—è–∂ –°–≤–µ—Ç–ª–æ–≥–æ—Ä—Å–∫, —Ç–∞—Ç—É–∞–∂ –±—Ä–æ–≤–µ–π –°–≤–µ—Ç–ª–æ–≥–æ—Ä—Å–∫, –ø–µ—Ä–º–∞–Ω–µ–Ω—Ç –≥—É–± –°–≤–µ—Ç–ª–æ–≥–æ—Ä—Å–∫
                        </div>

                        {/* –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ù–ê–í–ò–ì–ê–¶–ò–Ø - —è–∫–æ—Ä–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π */}
                        {isHomePage && (
                            <div className="nav-group anchor-nav">
                                <a
                                    href="#services"
                                    className="nav-link"
                                    onClick={(e) => {
                                        e.preventDefault();
                                        scrollToSection('services');
                                    }}
                                >
                                    –£—Å–ª—É–≥–∏
                                </a>
                                <a
                                    href="#advantages"
                                    className="nav-link"
                                    onClick={(e) => {
                                        e.preventDefault();
                                        scrollToSection('advantages');
                                    }}
                                >
                                    –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
                                </a>
                                <a
                                    href="#reviews"
                                    className="nav-link"
                                    onClick={(e) => {
                                        e.preventDefault();
                                        scrollToSection('reviews');
                                    }}
                                >
                                    –û—Ç–∑—ã–≤—ã
                                </a>
                            </div>
                        )}

                        {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–ø–∏—Å–∏ - –≤—Å–µ–≥–¥–∞ —Å–ø—Ä–∞–≤–∞ */}
                        <div className="nav-group contact-nav">
                            <button
                                className="contact-button desktop-only"
                                onClick={() => setIsContactPopupOpen(true)}
                            >
                                –°–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π
                            </button>
                        </div>
                    </nav>
                </div>
            </header>

            {/* –ü–ª–∞–≤–∞—é—â–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö */}
            <button
                className="contact-button floating-contact-button mobile-only"
                onClick={() => setIsContactPopupOpen(true)}
            >
                –ó–∞–ø–∏—Å—å
            </button>

            {/* –ü–æ–ø–∞–ø –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ —Å–≤—è–∑–∏ */}
            {isContactPopupOpen && (
                <div className="contact-popup-overlay" onClick={() => setIsContactPopupOpen(false)}>
                    <div className="contact-popup" onClick={(e) => e.stopPropagation()}>
                        <button
                            className="popup-close"
                            onClick={() => setIsContactPopupOpen(false)}
                        >
                            √ó
                        </button>

                        <h3>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏</h3>

                        {/* –ö–∞—Ä—Ç–æ—á–∫–∞ Instagram */}
                        <div className="contact-card">
                            <div className="contact-card-icon"><FaInstagram /></div>
                            <div className="contact-card-content">
                                <h4>–ù–∞–ø–∏—Å–∞—Ç—å –≤ Instagram</h4>
                                <p>–ë—ã—Å—Ç—Ä–∞—è —Å–≤—è–∑—å, –æ—Ç–≤–µ—á–∞—é –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞. –ú–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ —Ä–∞–±–æ—Ç—ã –∏ —Å—Ä–∞–∑—É –Ω–∞–ø–∏—Å–∞—Ç—å</p>
                                <button
                                    className="contact-card-button instagram"
                                    onClick={openInstagram}
                                >
                                    üí¨ –ü–µ—Ä–µ–π—Ç–∏ –≤ Instagram
                                </button>
                            </div>
                        </div>

                        {/* –ö–∞—Ä—Ç–æ—á–∫–∞ Telegram */}
                        <div className="contact-card">
                            <div className="contact-card-icon"><FaTelegram /></div>
                            <div className="contact-card-content">
                                <h4>–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É</h4>
                                <p>–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –∏ —è –ø–æ–ª—É—á—É –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ Telegram. –°–≤—è–∂—É—Å—å —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è</p>

                                <form onSubmit={handleTelegramSubmit} className="telegram-form">
                                    <div className="form-group">
                                        <input
                                            type="text"
                                            placeholder="–í–∞—à–µ –∏–º—è *"
                                            value={telegramData.name}
                                            onChange={(e) => setTelegramData({...telegramData, name: e.target.value})}
                                            required
                                            disabled={isLoading}
                                        />
                                    </div>
                                    <div className="form-group">
                                        <input
                                            type="tel"
                                            placeholder="+375 (XX) XXX-XX-XX *"
                                            value={telegramData.phone}
                                            onChange={(e) => formatPhoneNumber(e.target.value)}
                                            required
                                            disabled={isLoading}
                                            maxLength={19}
                                        />
                                    </div>
                                    <button
                                        type="submit"
                                        className="contact-card-button telegram"
                                        disabled={isLoading || !isValidPhone(telegramData.phone)}
                                    >
                                        {isLoading ? (
                                            <>‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º...</>
                                        ) : (
                                            <>üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É</>
                                        )}
                                    </button>

                                    {telegramData.phone && !isValidPhone(telegramData.phone) && (
                                        <p className="phone-error">‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</p>
                                    )}
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            )}
        </>
    );
};

export default Header;